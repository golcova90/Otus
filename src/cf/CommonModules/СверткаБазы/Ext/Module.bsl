//все это нужно скопировать в общий модуль с именем СверткаБазы, выставить модулю "Сервер" и "Вызов сервера"

&НаСервере
Функция ПодключитьБазуMSSQL(строка_подкл, таймаут) Экспорт
	DB = Новый COMОбъект("ADODB.Connection");	
	DB.ConnectionTimeout = 60;
    DB.CommandTimeout = таймаут;
    DB.ConnectionString = строка_подкл;
    DB.Open();
	Возврат DB
КонецФункции

&НаСервере
Процедура ОтключитьБазуMSSQL(DB) Экспорт
	Попытка
		DB.Close()
	Исключение
	КонецПопытки
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗапрос(DB, запрос, колонки) Экспорт
	тз = Новый ТаблицаЗначений;
	rs = DB.Execute(запрос);
	макс = rs.Fields.Count - 1;
	Для х = 0 По макс Цикл
		тз.Колонки.Добавить(колонки[rs.Fields(х).Name])
	КонецЦикла;
	
	Пока НЕ rs.EOF Цикл
		нов = тз.Добавить();
		Для х = 0 По макс Цикл
			нов[колонки[rs.Fields(х).Name]] = rs.Fields(х).Value
		КонецЦикла;
		rs.MoveNext()	
	КонецЦикла;
	
	rs.Close();
	Возврат тз
КонецФункции

/////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ЗаполнитьТаблицу(таблица) Экспорт
	Для Каждого элем Из Новый Структура("РегистрыНакопления, РегистрыСведений, РегистрыРасчета, РегистрыБухгалтерии") Цикл
		Для Каждого мрег Из Метаданные[элем.Ключ] Цикл
			нов = таблица.Добавить();
			нов.Имя = мрег.ПолноеИмя();
			
			Если элем.Ключ = "РегистрыНакопления" Тогда
				нов.Остатки = (мрег.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки)
			КонецЕсли;
			
			Если элем.Ключ = "РегистрыСведений" Тогда
				нов.Независимый = (мрег.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый);
				нов.НеПериодический = (мрег.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический)
			КонецЕсли
		КонецЦикла
	КонецЦикла
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПолучитьРазмерыРегистраВФоне(имя_таб, адрес_хран, парамы) Экспорт
	Попытка
		бд = ПодключитьБазуMSSQL(парамы.СтрокаПодключенияMSSQL, парамы.ТаймаутКомандMSSQL);
		
		бд.Execute("if object_id(N'tempdb..#ttt',N'U') is not null drop table #ttt");
		бд.Execute("create table #ttt(name varchar(30), [rows] varchar(30), reserved varchar(30), data varchar(30), index_size varchar(30), unused varchar(30))");
		
		мас = Новый Массив(1);
		мас[0] = имя_таб;
		табы = ПолучитьСтруктуруХраненияБазыДанных(мас);
		
		Для Каждого таб Из табы Цикл
			Если таб.Назначение = "Основная" Тогда
				таб_основ = "_" + таб.ИмяТаблицыХранения		
			КонецЕсли;
			бд.Execute("insert into #ttt exec sp_spaceused @objname = '_" + таб.ИмяТаблицыХранения + "'")		
		КонецЦикла;

		тз = ВыполнитьЗапрос(бд, "select name, cast([rows] as int) as cnt, cast(replace(reserved,'KB','') as int) as reserved, cast(replace(data,'KB','') as int) as data
								|, cast(replace(index_size,'KB','') as int) as index_size, cast(replace(unused,'KB','') as int) as unused from #ttt", 
						Новый Структура("name, cnt, reserved, data, index_size, unused", "Имя", "Количество", "Резерв", "Данные", "Индексы", "Неиспользуется"));
						
		стр = тз.Найти(таб_основ, "Имя");
		основ_зап = стр.Количество;
						
		струк = Новый Структура("Имя, ОсновныхЗаписей, ПрочихЗаписей, ОбщийРазмер", имя_таб, основ_зап, тз.Итог("Количество") - основ_зап, тз.Итог("Данные") + тз.Итог("Индексы"));
		ПоместитьВоВременноеХранилище(струк, адрес_хран);
		
		ОтключитьБазуMSSQL(бд)
	Исключение
		ПоместитьВоВременноеХранилище("ошибка: " + ОписаниеОшибки(), адрес_хран);
		ОтключитьБазуMSSQL(бд)
	КонецПопытки
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция ПолучитьВыражениеДатыMSSQLСоСмещением(парамы, дата)
	Возврат "DateAdd(yyyy, " + Формат(парамы.СмещениеДатыБазы, "ЧГ=0;") + ", N'" + Формат(дата, "ДФ=""гггг-ММ-ддTЧЧ:мм:сс.000""") + "')"	
КонецФункции

&НаСервере
Процедура РегистраторовВСписокУдаляемых(имярегистра, парамы, список_инструкций)
	Если Лев(имярегистра, 15) = "РегистрРасчета." Тогда
		имяпериода = "ПериодРегистрации"
	Иначе
		имяпериода = "Период"
	КонецЕсли;
	
	з = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ ТИПЗНАЧЕНИЯ(Регистратор) КАК ТипДок ИЗ " + имярегистра + " ГДЕ " + имяпериода + " < &Дата");
	з.УстановитьПараметр("Дата", парамы.ДатаСвертки);
	тз = з.Выполнить().Выгрузить();
	
	мас = Новый Массив(1);
	Для Каждого стр Из тз Цикл
		мдок = Метаданные.НайтиПоТипу(стр.ТипДок);
		
		мас[0] = мдок.ПолноеИмя();
		табы = ПолучитьСтруктуруХраненияБазыДанных(мас);

		таб_док = табы.Найти("Основная", "Назначение");
		sql = "UPDATE _" + таб_док.ИмяТаблицыХранения + " SET _Marked=1, _Posted=0 WHERE _Date_Time < " + ПолучитьВыражениеДатыMSSQLСоСмещением(парамы, парамы.ДатаСвертки);
		
		список_инструкций.Добавить(sql, мдок.ПолноеИмя() + " " + sql, Истина);
		
		Для Каждого мжур Из Метаданные.ЖурналыДокументов Цикл
			Если мжур.РегистрируемыеДокументы.Содержит(мдок) Тогда
			
				мас[0] = мжур.ПолноеИмя();
				табы = ПолучитьСтруктуруХраненияБазыДанных(мас);
				
				фильтр = ?(мжур.РегистрируемыеДокументы.Количество() = 1, "", "cast(_DocumentTRef as int) = " + СтрЗаменить(таб_док.ИмяТаблицыХранения, "Document", "") + " AND ");
				
				таб_жур = табы.Найти("Основная", "Назначение");
				sql = "UPDATE _" + таб_жур.ИмяТаблицыХранения + " SET _Marked=1, _Posted=0 WHERE " + фильтр + "_Date_Time < " + ПолучитьВыражениеДатыMSSQLСоСмещением(парамы, парамы.ДатаСвертки);
				
				список_инструкций.Добавить(sql, мжур.ПолноеИмя() + " " + sql, Истина)
			КонецЕсли
		КонецЦикла
	КонецЦикла
КонецПроцедуры

&НаСервере
Процедура РазбитьУдалениеНаЧасти(имя, имя_таб, назначение, имя_периода_таб, парамы, список_инструкций)
	имя_периода = ?(Лев(имя, 15) = "РегистрРасчета.", "ПериодРегистрации", "Период");
	
	з = Новый Запрос("ВЫБРАТЬ РАЗНОСТЬДАТ(" + имя_периода + ", &ДатаСвертки, ДЕНЬ) КАК НомерДня, КОЛИЧЕСТВО(*) КАК Колич ИЗ " + имя + " ГДЕ " + имя_периода + " < &ДатаСвертки СГРУППИРОВАТЬ ПО РАЗНОСТЬДАТ(" + имя_периода + ", &ДатаСвертки, ДЕНЬ) УПОРЯДОЧИТЬ ПО НомерДня УБЫВ");
	з.УстановитьПараметр("ДатаСвертки", парамы.ДатаСвертки);
	тз = з.Выполнить().Выгрузить();
	нач_день = тз[0].НомерДня;
	общ_кол = 0;
	Для Каждого стр Из тз Цикл
		общ_кол = общ_кол + стр.Колич;
		Если общ_кол >= парамы.КоличествоЗаписейУдаляемыхОдновременно Тогда
			нач_дата = парамы.ДатаСвертки - нач_день * (24*60*60);
			кон_дата = парамы.ДатаСвертки - (стр.НомерДня - 1) * (24*60*60);
			
			sql = "DELETE FROM _" + имя_таб + " WHERE " + имя_периода_таб + " >= " + ПолучитьВыражениеДатыMSSQLСоСмещением(парамы, нач_дата) + " AND " + имя_периода_таб + " < " + ПолучитьВыражениеДатыMSSQLСоСмещением(парамы, кон_дата);
			список_инструкций.Добавить(sql, назначение + " "  + sql, Истина);
			
			нач_день = стр.НомерДня - 1;
			общ_кол = 0
		КонецЕсли
	КонецЦикла;
	нач_дата = парамы.ДатаСвертки - нач_день * (24*60*60);
			
	sql = "DELETE FROM _" + имя_таб + " WHERE " + имя_периода_таб + " >= " + ПолучитьВыражениеДатыMSSQLСоСмещением(парамы, нач_дата) + " AND " + имя_периода_таб + " < " + ПолучитьВыражениеДатыMSSQLСоСмещением(парамы, парамы.ДатаСвертки);
	список_инструкций.Добавить(sql, назначение + " "  + sql, Истина)
КонецПроцедуры

&НаСервере
Процедура ДобавитьДляЧисткиДвиженийВБазе(имя, парамы, список_инструкций, без_периода = Ложь)
	мас = Новый Массив(1);
	мас[0] = имя;
	табы = ПолучитьСтруктуруХраненияБазыДанных(мас);

	Для Каждого таб Из табы Цикл
		Если без_периода Тогда
			sql = "TRUNCATE TABLE _" + таб.ИмяТаблицыХранения
		ИначеЕсли таб.Назначение = "Обороты" ИЛИ Лев(таб.Назначение, 5) = "Итоги" ИЛИ таб.Назначение = "АгрегатРегистраНакопления" ИЛИ таб.Назначение = "БуферОборотов" ИЛИ таб.Назначение = "НовыеОбороты" ИЛИ таб.Назначение = "ЗначенияСубконто" Тогда
			sql = "TRUNCATE TABLE _" + таб.ИмяТаблицыХранения
		ИначеЕсли таб.Назначение = "Основная" Тогда   
			Если парамы.КоличествоЗаписейУдаляемыхОдновременно > ПолучитьКоличествоЗаписей(имя, парамы, "ДоДатыСвертки") Тогда
				sql = "DELETE FROM _" + таб.ИмяТаблицыХранения + " WHERE _Period < " + ПолучитьВыражениеДатыMSSQLСоСмещением(парамы, парамы.ДатаСвертки)
			Иначе
				РазбитьУдалениеНаЧасти(имя, таб.ИмяТаблицыХранения, таб.Назначение, "_Period", парамы, список_инструкций);
				Продолжить
			КонецЕсли			
		ИначеЕсли таб.Назначение = "ПериодыДействия" Тогда
			Если парамы.КоличествоЗаписейУдаляемыхОдновременно > ПолучитьКоличествоЗаписей(имя, парамы, "ДоДатыСвертки") Тогда
				sql = "DELETE FROM _" + таб.ИмяТаблицыХранения + " WHERE _APDateTill < " + ПолучитьВыражениеДатыMSSQLСоСмещением(парамы, парамы.ДатаСвертки)
			Иначе
				РазбитьУдалениеНаЧасти(имя, таб.ИмяТаблицыХранения, таб.Назначение, "_APDateTill", парамы, список_инструкций);
				Продолжить
			КонецЕсли			
		ИначеЕсли таб.Назначение = "РегистрацияИзменений" ИЛИ таб.Назначение = "СтатистикаЗапросов" Тогда 
			sql = "TRUNCATE TABLE _" + таб.ИмяТаблицыХранения
		Иначе 
			sql = ""
		КонецЕсли;
		
		список_инструкций.Добавить(sql, таб.Назначение + " "  + sql, Истина)
	КонецЦикла	   
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоЗаписей(имя, парамы, условие)
	имя_периода = ?(Лев(имя, 15) = "РегистрРасчета.", "ПериодРегистрации", "Период");
	
	Если условие = "ДоДатыСвертки" Тогда
		сравнение = "<"
	ИначеЕсли условие = "ПослеДатыСвертки" Тогда
		сравнение = ">="
	Иначе
		ВызватьИсключение "Функция ПолучитьКоличествоЗаписей содержит неверное условие - " + условие
	КонецЕсли;
	
	з = Новый Запрос("ВЫБРАТЬ КОЛИЧЕСТВО(*) КАК Колич ИЗ " + имя + " ГДЕ " + имя_периода + " " + сравнение + " &ДатаСвертки");
	з.УстановитьПараметр("ДатаСвертки", парамы.ДатаСвертки);
	тз = з.Выполнить().Выгрузить();
	
	Возврат тз[0].Колич
КонецФункции

&НаСервере
Функция ПолучитьСписокКолонокРегистра(мета, ресурс_суфикс)
	рез = "";
	Для Каждого стр Из мета.Измерения Цикл
		рез = рез + стр.Имя + ","	
	КонецЦикла;
	Для Каждого стр Из мета.Ресурсы Цикл
		рез = рез + стр.Имя + ресурс_суфикс + " КАК " + стр.Имя + ","	
	КонецЦикла;
	Возврат Лев(рез, СтрДлина(рез) - 1)
КонецФункции

&НаСервере
Функция ПолучитьСписокКолонокБухгалтерскогоРегистра(мета)
	рез = "";
	Для Каждого стр Из мета.Измерения Цикл
		Если Неопределено <> стр.ПризнакУчета Тогда
			рез = рез + стр.Имя + " КАК " + стр.Имя + "Дт,";	
			рез = рез + стр.Имя + " КАК " + стр.Имя + "Кт,"	
		Иначе
			рез = рез + стр.Имя + ","	
		КонецЕсли
	КонецЦикла;
	Для Каждого стр Из мета.Ресурсы Цикл
		Если Неопределено <> стр.ПризнакУчета Тогда
			рез = рез + стр.Имя + "ОстатокДт КАК " + стр.Имя + "Дт,";	
			рез = рез + стр.Имя + "ОстатокКт КАК " + стр.Имя + "Кт,"	
		Иначе
			рез = рез + стр.Имя + "Остаток КАК " + стр.Имя + ","	
		КонецЕсли
	КонецЦикла;
	рез = рез + "Счет КАК СчетДт,Счет КАК СчетКт";
	Для х = 1 По Метаданные.ПланыСчетов[мета.Имя].МаксКоличествоСубконто Цикл
		рез = рез + ",Субконто" + х + " КАК СубконтоДт" + х + ",ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка) КАК ВидСубконтоДт" + х;	
		рез = рез + ",Субконто" + х + " КАК СубконтоКт" + х + ",ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка) КАК ВидСубконтоКт" + х	
	КонецЦикла;
	Возврат рез
КонецФункции

&НаСервере
Процедура СверткаРегистраНакопленияОбороты(имя, мета, парамы, список_инструкций)
	ДобавитьДляЧисткиДвиженийВБазе(имя, парамы, список_инструкций);
	РегистраторовВСписокУдаляемых(имя, парамы, список_инструкций)
КонецПроцедуры

&НаСервере
Функция СверткаРегистраНакопленияОстатки(имя, мета, парамы, список_инструкций)
	ДобавитьДляЧисткиДвиженийВБазе(имя, парамы, список_инструкций);
	РегистраторовВСписокУдаляемых(имя, парамы, список_инструкций);

	колонки = ПолучитьСписокКолонокРегистра(мета, "Остаток");
	з = Новый Запрос("ВЫБРАТЬ " + колонки + " ИЗ РегистрНакопления." + мета.Имя + ".Остатки(&Дата)");
	з.УстановитьПараметр("Дата", парамы.ДатаСвертки);
	тз = з.Выполнить().Выгрузить();
	
	Возврат тз
КонецФункции

&НаСервере
Функция СверткаРегистраСведенийПериод(имя, мета, парамы, список_инструкций)
	ДобавитьДляЧисткиДвиженийВБазе(имя, парамы, список_инструкций);
	Если мета.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		РегистраторовВСписокУдаляемых(имя, парамы, список_инструкций);
	КонецЕсли;
	
	колонки = ПолучитьСписокКолонокРегистра(мета, "");   
	з = Новый Запрос("ВЫБРАТЬ " + колонки + " ИЗ РегистрСведений." + мета.Имя + ".СрезПоследних(&Дата)");
	з.УстановитьПараметр("Дата", парамы.ДатаСвертки);
	тз = з.Выполнить().Выгрузить();
		
	Возврат тз
КонецФункции

&НаСервере
Процедура СверткаРегистраСведенийБезПериода(имя, мета, парамы, список_инструкций)
	ДобавитьДляЧисткиДвиженийВБазе(имя, парамы, список_инструкций, Истина);	
	Если мета.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		ВызватьИсключение "Непериодические регистры сведений подчиненные регистратору не обрабатываются.";
	КонецЕсли
КонецПроцедуры

&НаСервере
Процедура СверткаРегистраРасчета(имя, мета, парамы, список_инструкций)
	ДобавитьДляЧисткиДвиженийВБазе(имя, парамы, список_инструкций);	
	РегистраторовВСписокУдаляемых(имя, парамы, список_инструкций) 
КонецПроцедуры

&НаСервере
Функция СверткаРегистраБухгалтерии(имя, мета, парамы, список_инструкций)
	Если имя <> "РегистрБухгалтерии.Хозрасчетный" Тогда
		ВызватьИсключение "регистры бухгалтерии, кроме Хозрасчетный, не обрабатываются.";
	КонецЕсли;
	ДобавитьДляЧисткиДвиженийВБазе(имя, парамы, список_инструкций);	
	РегистраторовВСписокУдаляемых(имя, парамы, список_инструкций); 
	
	колонки = ПолучитьСписокКолонокБухгалтерскогоРегистра(мета); 
	з = Новый Запрос("ВЫБРАТЬ " + колонки + " ИЗ РегистрБухгалтерии." + мета.Имя + ".Остатки(&Дата)");
	з.УстановитьПараметр("Дата", парамы.ДатаСвертки);
	тз = з.Выполнить().Выгрузить();
	
	Для Каждого стр Из тз Цикл
		Если стр.Сумма < 0 Тогда
			Для х = 1 По стр.СчетКт.ВидыСубконто.Количество() Цикл
				Выполнить("стр.ВидСубконтоКт" + х + " = стр.СчетКт.ВидыСубконто[х - 1].ВидСубконто");	
				Выполнить("стр.СубконтоДт" + х + " = Неопределено")	
			КонецЦикла;
			
			стр.СчетДт = ПланыСчетов[мета.Имя].Вспомогательный;
			
			Для Каждого рес Из мета.Ресурсы Цикл
				Если Неопределено <> рес.ПризнакУчета Тогда
					врем = стр[рес.Имя + "Дт"];
					стр[рес.Имя + "Дт"] = -стр[рес.Имя + "Кт"];
					стр[рес.Имя + "Кт"] = -врем
				Иначе
					стр[рес.Имя] = -стр[рес.Имя]
				КонецЕсли
			КонецЦикла
		Иначе
			Для х = 1 По стр.СчетДт.ВидыСубконто.Количество() Цикл
				Выполнить("стр.ВидСубконтоДт" + х + " = стр.СчетДт.ВидыСубконто[х - 1].ВидСубконто");	
				Выполнить("стр.СубконтоКт" + х + " = Неопределено")	
			КонецЦикла;
			стр.СчетКт = ПланыСчетов[мета.Имя].Вспомогательный
		КонецЕсли
	КонецЦикла;
	
	Возврат тз
КонецФункции

&НаСервере
Процедура ПодготовитьРегистрВФоне(имя, адрес_хран, парамы) Экспорт
	Попытка
		СписокИнструкцийMSSQL = Новый СписокЗначений;
		тз = Неопределено;
		
		ПосчитатьОстающиеся = Истина;

		мета = Метаданные.НайтиПоПолномуИмени(имя);
		Если 0 < Найти(имя, "РегистрНакопления.") Тогда		
			Если мета.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
				
				СверткаРегистраНакопленияОбороты(имя, мета, парамы, СписокИнструкцийMSSQL)
				
			ИначеЕсли мета.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				
				тз = СверткаРегистраНакопленияОстатки(имя, мета, парамы, СписокИнструкцийMSSQL)
			КонецЕсли
		ИначеЕсли 0 < Найти(имя, "РегистрРасчета.") Тогда
			
			СверткаРегистраРасчета(имя, мета, парамы, СписокИнструкцийMSSQL)
			
		ИначеЕсли 0 < Найти(имя, "РегистрБухгалтерии.") Тогда
			
			тз = СверткаРегистраБухгалтерии(имя, мета, парамы, СписокИнструкцийMSSQL)
			
		ИначеЕсли 0 < Найти(имя, "РегистрСведений.") Тогда
			Если мета.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				
				ПосчитатьОстающиеся = Ложь;
				СверткаРегистраСведенийБезПериода(имя, мета, парамы, СписокИнструкцийMSSQL)
			Иначе
				тз = СверткаРегистраСведенийПериод(имя, мета, парамы, СписокИнструкцийMSSQL)
			КонецЕсли
		КонецЕсли;   
		
		Если ПосчитатьОстающиеся Тогда
			ОстаетсяЗаписей = ПолучитьКоличествоЗаписей(имя, парамы, "ПослеДатыСвертки");
		КонецЕсли;
		
		хз_тз = ?(тз = Неопределено ИЛИ тз.Количество() = 0, Неопределено, Новый ХранилищеЗначения(тз, Новый СжатиеДанных(9)));
		Свернутые = ?(тз = Неопределено, 0, тз.Количество());
				
		струк = Новый Структура("СписокИнструкцийMSSQL, Свернутые, ОстаетсяЗаписей, хзТаблицаИтогов", СписокИнструкцийMSSQL, Свернутые, ОстаетсяЗаписей, хз_тз);
		адресТипыУдаляемыхДокументов = ПоместитьВоВременноеХранилище(струк, адрес_хран) 
		
	Исключение
		ПоместитьВоВременноеХранилище("ошибка: " + ОписаниеОшибки(), адрес_хран)
	КонецПопытки
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура УдалитьДвиженияВФоне(список_инструкций, адрес_хран, парамы) Экспорт
	Попытка
		бд = ПодключитьБазуMSSQL(парамы.СтрокаПодключенияMSSQL, парамы.ТаймаутКомандMSSQL);
		
		Для Каждого эл Из список_инструкций Цикл
			Если эл.Пометка Тогда
				бд.Execute(эл.Значение)
			КонецЕсли
		КонецЦикла;		
						
		струк = Новый Структура("Успешно", Истина);
		ПоместитьВоВременноеХранилище(струк, адрес_хран);
		
		ОтключитьБазуMSSQL(бд)
	Исключение
		ПоместитьВоВременноеХранилище("ошибка: " + ОписаниеОшибки(), адрес_хран);
		ОтключитьБазуMSSQL(бд)
	КонецПопытки		
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура СоздатьДокументКорректировки(тз, парамы) Экспорт
	Попытка
		НачатьТранзакцию();
		
		одок = Документы.КорректировкаЗаписейРегистров.СоздатьДокумент();
		одок.Дата = парамы.ДатаСвертки - 1;
		
		Для Каждого стр Из тз Цикл
			Если НЕ стр.Обрабатывать ИЛИ НЕ ЗначениеЗаполнено(стр.адресТаблицыИтогов) Тогда
				Продолжить
			КонецЕсли;
			
			мрег = Метаданные.НайтиПоПолномуИмени(стр.Имя);
			
			тз = ПолучитьИзВременногоХранилища(стр.адресТаблицыИтогов).Получить();
			тз.Колонки.Добавить("Период");
			тз.ЗаполнитьЗначения(парамы.ДатаСвертки - 1, "Период");
			
			Если стр.Независимый Тогда
				нз = РегистрыСведений[мрег.Имя].СоздатьНаборЗаписей();
				нз.Загрузить(тз);
				нз.Записать(Ложь)
			Иначе
				Если Метаданные.РегистрыНакопления.Содержит(мрег) Тогда
					
					нов = одок.ТаблицаРегистровНакопления.Добавить()
					
				ИначеЕсли Метаданные.РегистрыСведений.Содержит(мрег) Тогда
					
					нов = одок.ТаблицаРегистровСведений.Добавить()
					
				ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(мрег) Тогда
					
					нов = одок.ТаблицаРегистровБухгалтерии.Добавить()
					
				ИначеЕсли Метаданные.РегистрыРасчета.Содержит(мрег) Тогда
					
					нов = одок.ТаблицаРегистровБухгалтерии.Добавить()
					
				КонецЕсли;
				
				нов.Имя = мрег.Имя;
				нов.Представление = нов.Имя;
								
				одок.Движения[мрег.Имя].Загрузить(тз)
			КонецЕсли
		КонецЦикла;
		
		одок.Записать(РежимЗаписиДокумента.Запись);
				
		ЗафиксироватьТранзакцию();
		
		Сообщить("Создано " + одок.Ссылка)
	Исключение
		Сообщить("ошибка: " + ОписаниеОшибки(), СтатусСообщения.Важное);
		ОтменитьТранзакцию()
	КонецПопытки
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура СообщитьПользователю(текст)
	сп = Новый СообщениеПользователю;
	сп.Текст = текст;
	сп.Сообщить()
КОнецПроцедуры

&НаСервере
Процедура УдалитьПомеченныеВФоне(парамы) Экспорт
	Попытка
		флаг_заново = Истина;
		Попытка 
			струк_хран = ЗначениеИзФайла(парамы.ИмяФайлаСостоянияУдаленияДокументов).Получить();
			СообщитьПользователю("Продолжение удаления документов. Если нужно начать удаление заново, то удалите файл указанный в параметре ИмяФайлаСостоянияУдаленияДокументов");
			флаг_заново = Ложь
		Исключение
		КонецПопытки;
			
		Если флаг_заново Тогда
			СообщитьПользователю("Поиск ссылок на документы. Процедура может занять несколько часов");
			
			тхт = "";
			Для Каждого мдок Из Метаданные.Документы Цикл
				тхт = тхт + "ВЫБРАТЬ Ссылка, Дата Из " + мдок.ПолноеИмя() + " ГДЕ ПометкаУдаления И Дата < &ДатаСвертки ОБЪЕДИНИТЬ ВСЕ "
			КонецЦикла;
			тхт = Лев(тхт, СтрДлина(тхт) - 16) + " УПОРЯДОЧИТЬ ПО Дата УБЫВ";
			з = Новый Запрос(тхт);
			з.УстановитьПараметр("ДатаСвертки", парамы.ДатаСвертки);
			
			тз_доки = з.Выполнить().Выгрузить();
			мас = тз_доки.ВыгрузитьКолонку("Ссылка");
			
			нач = ТекущаяДата();
			тз_ссылки = НайтиПоСсылкам(мас);
			СообщитьПользователю("Ссылки получены за " + (ТекущаяДата() - нач) + " сек. Начало удаления документов");
			
			тз_ссылки.Колонки[0].Имя = "СсылкаЕсть";	
			тз_ссылки.Колонки[1].Имя = "СсылающийсяОбъект";	

			струк_хран = Новый Структура("ТЗСсылки, ТЗДоки, Удаленные, ТекущаяСтрока", тз_ссылки, тз_доки, 0, 0);
						
			мас = Неопределено;
			тз_ссылки = Неопределено;
			тз_доки = Неопределено
		КонецЕсли;
		
		кол_доки = струк_хран.ТЗДоки.Количество();
		СообщитьПользователю("Количество строк в таблице документов " + кол_доки);
				
		время_сообщить_сохранить = ТекущаяДата();
		ф_еще_раз = Истина;
		Пока ф_еще_раз Цикл
			ф_еще_раз = Ложь;
			Для х = струк_хран.ТекущаяСтрока По кол_доки - 1 Цикл
				
				стр_док = струк_хран.ТЗДоки[х];
				
				Если время_сообщить_сохранить <= ТекущаяДата() Тогда
					время_сообщить_сохранить = ТекущаяДата() + парамы.ПериодВыводаСообщенийСек;
					
					струк_хран.ТекущаяСтрока = х;
					ЗначениеВФайл(парамы.ИмяФайлаСостоянияУдаленияДокументов, Новый ХранилищеЗначения(струк_хран, Новый СжатиеДанных(9)));
					
					СообщитьПользователю("удалено " + струк_хран.Удаленные + ", текущая строка " + струк_хран.ТекущаяСтрока)
				КонецЕсли;

				Если Неопределено = стр_док.Ссылка Тогда
					Продолжить
				КонецЕсли;
								
				Если Неопределено = струк_хран.ТЗСсылки.Найти(стр_док.Ссылка, "СсылкаЕсть") Тогда
					строки = струк_хран.ТЗСсылки.НайтиСтроки(Новый Структура("СсылающийсяОбъект", стр_док.Ссылка));
					Для Каждого стр_ссылка Из строки Цикл
						стр_ссылка.СсылающийсяОбъект = Неопределено;
						стр_ссылка.СсылкаЕсть = Неопределено
					КонецЦикла;
					стр_док.Ссылка.ПолучитьОбъект().Удалить();
					струк_хран.Удаленные = струк_хран.Удаленные + 1;
					стр_док.Ссылка = Неопределено;
					ф_еще_раз = Истина
				КонецЕсли
			КонецЦикла;
			струк_хран.ТекущаяСтрока = 0
		КонецЦикла;
		СообщитьПользователю("ЗАВЕРШЕНО. удалено " + струк_хран.Удаленные + ", из " + кол_доки)
	Исключение
		СообщитьПользователю("ошибка: " + ОписаниеОшибки())
	КонецПопытки		
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////

&НаСервере
Процедура ПочиститьМодифицированныеОбъекты(парамы) Экспорт
	з = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.МодифицированныеОбъекты ГДЕ СсылкаНаОбъект.Дата IS NOT NULL И СсылкаНаОбъект.Дата < &Дата");	
	з.УстановитьПараметр("Дата", парамы.ДатаСвертки);
	тз = з.Выполнить().Выгрузить();
	х = 0;
	у = 0;
	Для Каждого стр Из тз Цикл
		х = х + 1;
		мас = Новый Массив(1);
		мас[0] = стр.Ссылка;
		рез = НайтиПоСсылкам(мас);
		Если рез.Количество() = 0 Тогда
			у = у + 1;
			Сообщить("Удаляем " + стр.Ссылка);
			стр.Ссылка.ПолучитьОбъект().Удалить()
		Иначе
			Сообщить("Пропускаем " + стр.Ссылка)
		КонецЕсли
	КонецЦикла
КонецПроцедуры
